#!/usr/bin/env python

import json, os, platform, shutil, subprocess

def is_local():
    return os.getcwd() != "/autograder"

def copy_files(dir):
    shutil.rmtree(dir, ignore_errors=True)
    os.mkdir(dir)
    shutil.copytree("src/main/java", f"{dir}/java")

def copy_req_files(files, dir):
    for file in files:
        path = f"/autograder/submission/{file}"
        if os.path.exists(path):
            shutil.copy(path, f"{dir}/java")
        else:
            raise Exception(f"File {file} not found.")

def init():
    if is_local():
        init_local()
    else:
        init_server()

def init_local():
    copy_files("tmp")

def init_server():
    copy_files("source/tmp")
    copy_req_files(["MyString.java"], "source/tmp")
    os.chdir("source")

def compile():
    os.chdir("tmp")
    result = subprocess.run(
        "javac -g -encoding UTF8 -Xlint:none -d classes java/MyString.java java/HashExercise.java",
        stderr=subprocess.PIPE)
    if result.returncode != 0:
        raise Exception("Compilation error: " + result.stderr.decode("UTF-8"))
    os.chdir("..")

def run():
    os.chdir("tmp/classes")
    sep = ';' if platform.system() == "Windows" else ":"
    result = subprocess.run(
        "java -cp .;../../src/main/resources HashExercise",
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
    if result.returncode != 0:
        raise Exception("Runtime error: " + result.stderr.decode("UTF-8"))
    if is_local:
        print(result.stdout)
    
def output_error(e):
    message = getattr(e, 'message', repr(e))
    data = {"score": 0, "output": message}
    print(json.dumps(data))
    
if __name__ == "__main__":
    try:
        init()
        compile()
        run()
    except Exception as e:
        output_error(e)
        
        
